ggplot2::xlab("Substrate, mM") +
ggplot2::ylab("Velocity error") +
ggplot2::ggtitle("Residual error of model") +
ggthemes::theme_few()
# Plot figures
#gridExtra::grid.arrange(enz.plot, res.plot, nrow = 2)
enz.plot
levels(fit.df$I)
fit.df$I
levels(fit.df$I)
fit.df$I = factor((fit.df$I, levels = c("0", "1", "3", "5", "10")))
counter = 0
for (I.conc in inhib.concs) {
V0.range = Vmax*A.range/(Km*(1 + I.conc/Ki) + A.range) # Calculate theoretical values over a range
fit.df[(1 + num.A.range*counter):(num.A.range*(1+counter)),3] = V0.range
counter = counter + 1
}
# Residuals
EK.data$Resids = EK.data$V0 - EK.data$V0.fit
sumsq.res = sum(EK.data$Resids^2, na.rm = T)
percent.errors = abs((EK.data$Resids/EK.data$V0)*100)
## Results ----
cat(sprintf("Km is %.3f, \nKi is %.3f \nVmax is %.3f\n", Km, Ki, Vmax))
sprintf("Sum of squared residuals error is %.3e", sumsq.res)
# Figure 1 - Enzyme Kinetics
enz.plot =
ggplot2::ggplot(EK.data, ggplot2::aes(A, V0, colour = "Data")) +
ggplot2::geom_point() +
ggplot2::geom_line(fit.df, mapping = ggplot2::aes(A, V0.fit, colour = I), inherit.aes = F) +
ggplot2::geom_hline(yintercept = Vmax, linetype = "dashed", colour = "red") +
ggplot2::geom_vline(xintercept = Km, linetype = "dashed", colour = "red") +
ggplot2::xlab("Substrate, mM") +
ggplot2::ylab("Velocity, ÂµM/min/mg.enz") +
ggplot2::ggtitle("Enzyme Kinetics \n Model fitted to data") +
ggplot2::labs(colour = "Legend") +
ggthemes::theme_few()
# Figure 2 - Residuals of model
res.plot = ggplot2::ggplot(data = EK.data, ggplot2::aes(x = A, y = Resids)) +
ggplot2::geom_point() +
ggplot2::xlab("Substrate, mM") +
ggplot2::ylab("Velocity error") +
ggplot2::ggtitle("Residual error of model") +
ggthemes::theme_few()
# Plot figures
#gridExtra::grid.arrange(enz.plot, res.plot, nrow = 2)
enz.plot
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
# Figure 3 - Lineweaver-Burk
LWB.func = function(x){(Km/Vmax)*x + 1/Vmax}
LWB.plot = plot(LWB.func(1:1000))
LWB.plot = plot(LWB.func(1/A.low:1/A.high))
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
View(EK.data)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/R Practice/Ren\'s R files/LsoDHDPS_kinetics.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
View(EK.data)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/Trial script.R', encoding = 'UTF-8', echo=TRUE)
HI = LWB.func(A.range)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
debugSource('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
debugSource('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
View(params)
params[["A.inv"]]
params[["V0.inv"]]
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
View(params)
params[["I"]]
HI = params[6]
View(HI)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
View(params)
View(params)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
open(params)
view(params)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
View(fit.df)
View(fit.df)
View(fit.df)
view(fit.df)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
# input the data
setwd("C:/Users/64210/OneDrive/Documents/Uni/PhD/2021/R Practice/Ren's R files")
kindata <- read.csv("LsoDHDPS_Kinetics.csv")
source('~/Uni/PhD/2021/R Practice/Ren\'s R files/LsoDHDPS_kinetics.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/R Practice/Ren\'s R files/LsoDHDPS_kinetics.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
View(model)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
View(model)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
View(model)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
Q
Q
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/Trial script.R', encoding = 'UTF-8', echo=TRUE)
View(fit.df)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/Trial script.R', encoding = 'UTF-8', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/Trial script.R', encoding = 'UTF-8', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/Trial script.R', encoding = 'UTF-8', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/Trial script.R', encoding = 'UTF-8', echo=TRUE)
source('~/Uni/PhD/enzKinet/R/TC.R', encoding = 'UTF-8', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
## Code to be used if enzKinet package is not installed or has been updated
setwd("C:/Users/64210/OneDrive/Documents/Uni/PhD/enzKinet")
devtools::document() # rebuilds enzKinet to add functions to export list
setwd("C:/Users/64210/OneDrive/Documents/Uni/PhD")
devtools::install("enzKinet")
# Open libraries
library(enzKinet)
# Get data
setwd("C:/Users/64210/OneDrive/Documents/Uni/PhD/2021/Enzyme Kinetics/V0")
EK.data = read.csv("EK TC.csv", fileEncoding = "UTF-8-BOM")
# Choose model
models = list("Michaelis-Menten",
"Linear compeditive inhibition",
"Ternary-complex",
"Ping-pong")
model_name = models[[4]]
if (model_name == models[[1]]) {
params = Michaelis.Menten(EK.data)
Km = params[1]
Vmax = params[2]
err = params[3]
sprintf("Km is %.3f, Vmax is %.3f, the error was %.3e", Km, Vmax, err)
} else if (model_name == models[[2]]) {
params = enzKinet::LCI(EK.data)
Km = params[1]
Ki = params[2]
Vmax = params[3]
err = params[4]
} else if (model_name == models[[3]]) {
#stop("Model not yet implemented")
params = enzKinet::TC(EK.data)
} else if (model_name == models[[4]]) {
#stop("Model not yet implemented")
params = enzKinet::Ping.pong(EK.data)
} else {
stop("Model not recognised")
}
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
library(broom)
library(tidyverse)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
library(roxygen2)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
## Code to be used if enzKinet package is not installed or has been updated
setwd("C:/Users/64210/OneDrive/Documents/Uni/PhD/enzKinet")
devtools::document() # rebuilds enzKinet to add functions to export list
## Code to be used if enzKinet package is not installed or has been updated
setwd("C:/Users/64210/OneDrive/Documents/Uni/PhD/enzKinet")
devtools::document() # rebuilds enzKinet to add functions to export list
params = enzKinet::Ping.pong(EK.data)
params = enzKinet::Ping.pong2(EK.data)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
source('~/Uni/PhD/2021/Enzyme Kinetics/V0/EK V0_10.R', echo=TRUE)
## Code to be used if enzKinet package is not installed or has been updated
setwd("C:/Users/64210/OneDrive/Documents/Uni/PhD/enzKinet")
devtools::document() # rebuilds enzKinet to add functions to export list
## Code to be used if enzKinet package is not installed or has been updated
setwd("C:/Users/64210/OneDrive/Documents/Uni/PhD/enzKinet")
devtools::document() # rebuilds enzKinet to add functions to export list
## Code to be used if enzKinet package is not installed or has been updated
setwd("C:/Users/64210/OneDrive/Documents/Uni/PhD/enzKinet")
devtools::document() # rebuilds enzKinet to add functions to export list
## Code to be used if enzKinet package is not installed or has been updated
setwd("C:/Users/64210/OneDrive/Documents/Uni/PhD/enzKinet")
devtools::document() # rebuilds enzKinet to add functions to export list
devtools::load_all() # rebuilds enzKinet to add functions to export list
devtools::document() # rebuilds enzKinet to add functions to export list
devtools::check_man(pkg = "enzKinet"_)
devtools::check_man(pkg = "enzKinet")
setwd("C:/Users/64210/OneDrive/Documents/Uni/PhD")
devtools::check_man(pkg = "enzKinet")
roxygen2::roxygenise(package.dir = "C:/Users/64210/OneDrive/Documents/Uni/PhD/enzKinet")
shiny::runApp('~/Uni/PhD/enzKinet_webpage')
install_github(repo = 'damacer/enzKinet2',
ref = "HEAD",
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
install_github(repo = 'damacer/enzKinet2',
ref = "HEAD",
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
library(devtools)
install_github(repo = 'damacer/enzKinet2',
ref = "HEAD",
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
packageVersion("Rcpp")
R version
R.version
install_github(repo = 'damacer/enzKinet2',
ref = "HEAD",
subdir = "master"
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
install_github(repo = 'damacer/enzKinet2',
ref = "HEAD",
subdir = "master",
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
install_github(repo = 'damacer/enzKinet2',
ref = "master",
#subdir = "master",
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
install_github(repo = 'damacer/enzKinet2',
ref = "HEAD",
#subdir = "master",
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
install_github(repo = 'damacer/enzKinet2',
ref = "HEAD",
#subdir = "master",
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
library(shiny)
library(shinyjs)
library(shinythemes)
library(devtools)
install_github(repo = 'damacer/enzKinet2',
ref = "HEAD",
#subdir = "master",
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
install_github(repo = 'damacer/enzKinet2',
#ref = "HEAD",
#subdir = "master",
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
install_github(repo = 'damacer/enzKinet2',
ref = "master",
#subdir = "master",
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
library(devtools)
library(enzKinet2)
install_github(repo = 'damacer/enzKinet2',
ref = "HEAD",
#subdir = "master",
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
install_github(repo = 'damacer/enzKinet2',
ref = "HEAD",
#subdir = "master",
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
library(pacman)
p_load(glancce)
p_load(glance)
library(shiny)
library(shinyjs)
library(shinythemes)
library(devtools)
R.version
install.packages(installr)
install.packages("installr")
library(installr)
updateR()
library(shiny)
library(shinyjs)
library(shinythemes)
library(devtools)
install_github(repo = 'damacer/enzKinet2',
ref = "HEAD",
#subdir = "master",
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
install.packages(pacman)
install.packages("pacman")
p_load(glance)
p_load(glance)
pacman::p_load(glance)
runApp('~/Uni/PhD/enzKinet_webpage')
## Code to be used if enzKinet package is not installed or has been updated
setwd("C:/Users/64210/OneDrive/Documents/Uni/PhD/enzKinet2")
devtools::document() # rebuilds enzKinet to add functions to export list
runApp('~/Uni/PhD/enzKinet_webpage')
runApp('~/Uni/PhD/enzKinet_webpage')
runApp('~/Uni/PhD/enzKinet_webpage')
install.packages("XML")
p_load(XML)
pacman::p_load(XML)
library(pacman)
pacman::p_load(XML)
install_github(repo = 'damacer/enzKinet2',
ref = "HEAD",
#subdir = "master",
auth_token = "84271fb5e3d197b40fadac350c17fa0879adf4e0")
runApp('~/Uni/PhD/enzKinet_webpage')
shiny::runApp('~/Uni/PhD/enzKinet_webpage')
shiny::runApp()
shiny::runApp()
shiny::runApp()
## Code to be used if enzKinet package is not installed or has been updated
#setwd("C:/Users/64210/OneDrive/Documents/Uni/PhD/enzKinet2")
#devtools::document() # rebuilds enzKinet to add functions to export list
setwd("C:/Users/64210/OneDrive/Documents/Uni/PhD")
devtools::install("enzKinet2")
shiny::runApp('enzKinet_webpage')
library(searchable)
install.packages("searchable")
library(pacman)
p_load(searchable)
p_load(rapportools)
library(rapportools)
tryCatch(x = TRUE, error = function(cond) {print(cond)})
tryCatch(expr = (TRUE), error = function(cond) {print(cond)})
tryCatch(expr = throw(), error = function(cond) {print(cond)})
tryCatch(expr = 0/0, error = function(cond) {print(cond)})
tryCatch(expr = stop(), error = function(cond) {print(cond)})
tryCatch(expr = stop(), error = function(cond) {})
tryCatch(expr = stop(), error = function(cond) {print("Hi, there was an error")})
runApp('enzKinet_webpage')
library(shiny)
library(shinyjs)
library(shinythemes)
library(rapportools)
library(devtools)
library(enzKinet2)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Setup
theme = shinytheme("darkly"),
useShinyjs(),
# Application title
titlePanel("Enzyme Kinetics Data"),
# Sidebar layout for inputs and outputs
sidebarLayout(
# Sidebar contains inputs- file, model
sidebarPanel(
# Ask user for file
fileInput(
inputId = "file",
label = "Please choose a .csv file to analyse",
multiple = F,
accept = ".csv",
buttonLabel = "Browse",
placeholder = "No file selected"
),
# Model selection
selectInput(
inputId = "model.name",
label = "Choose model",
choices = list("Michaelis-Menten" = "MM",
"Linear competitive inhibition" = "LCI",
"Ternary-complex" = "TC",
"Ping-pong" = "PP",
"Custom one substrate" = "C1S",
"Custom two substrates" = "C2S"),
selected = "Michaelis-Menten",
multiple = F
),
# Button to run enzKinet package when pressed
actionButton(
inputId = "run",
label = "Analyse data"
)
),
# The main section contains the outputs- plots
mainPanel(
plotOutput(outputId = "plot.A"),
plotOutput(outputId = "plot.B"),
plotOutput(outputId = "LWB.plot.A"),
plotOutput(outputId = "LWB.plot.B"),
plotOutput(outputId = "res.plot"),
tableOutput(outputId = "stats.table")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
statistics = data.frame(Model = "",
R2 = NA,
RMSE = NA,
MAE = NA,
AIC = NA,
BIC = NA,
logLik = NA)
run.counter = 1
observeEvent(input$run, {
params = enzKinet2::EK.main(input$file$datapath, input$model.name)
if (is_string(params)) {
print(params)
}
if (input$model.name == "MM") {
# Michaelis-Menten
first.plot = 3
show("plot.A")
hide("plot.B")
show("LWB.plot.A")
hide("LWB.plot.B")
show("res.plot")
output$plot.A <- renderPlot(params[first.plot])
output$LWB.plot.A <- renderPlot(params[first.plot + 1])
output$res.plot <- renderPlot(params[first.plot + 2])
statistics[run.counter,] = params[[first.plot + 3]]
print(statistics)
print(run.counter)
run.counter = run.counter + 1
} else if (input$model.name == "LCI") {
# Linear competitive inhibition
first.plot = 4
show("plot.A")
hide("plot.B")
show("LWB.plot.A")
hide("LWB.plot.B")
show("res.plot")
output$plot.A <- renderPlot(params[first.plot])
output$LWB.plot.A <- renderPlot(params[first.plot + 1])
output$res.plot <- renderPlot(params[first.plot + 2])
} else if (input$model.name == "TC") {
# Ternary-complex
first.plot = 5
show("plot.A")
show("plot.B")
show("LWB.plot.A")
show("LWB.plot.B")
show("res.plot")
output$plot.A <- renderPlot(params[first.plot])
output$plot.B <- renderPlot(params[first.plot + 1])
output$LWB.plot.A <- renderPlot(params[first.plot + 2])
output$LWB.plot.B <- renderPlot(params[first.plot + 3])
output$res.plot <- renderPlot(params[first.plot + 4])
} else if (input$model.name == "PP") {
# Ping-pong
first.plot = 4
show("plot.A")
show("plot.B")
show("LWB.plot.A")
show("LWB.plot.B")
show("res.plot")
output$plot.A <- renderPlot(params[first.plot])
output$plot.B <- renderPlot(params[first.plot + 1])
output$LWB.plot.A <- renderPlot(params[first.plot + 2])
output$LWB.plot.B <- renderPlot(params[first.plot + 3])
output$res.plot <- renderPlot(params[first.plot + 4])
}
output$stats.table <- renderTable(statistics)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('enzKinet_webpage')
shiny::runApp('enzKinet_webpage')
runApp('enzKinet_webpage')
